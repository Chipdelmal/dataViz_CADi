library(igraph)
library(networkD3)
# Zachary's Karate Club with Clustering
# Use igraph to make the graph and find membership
karate <- make_graph("Zachary")
wc <- cluster_walktrap(karate)
members <- membership(wc)
# Convert to object suitable for networkD3
karate_d3 <- igraph_to_networkD3(karate, group = members)
forceNetwork(Links = karate_d3$links, Nodes = karate_d3$nodes,
Source = 'source', Target = 'target', NodeID = 'name',
Group = 'group')
fn=forceNetwork(Links = karate_d3$links, Nodes = karate_d3$nodes,
Source = 'source', Target = 'target', NodeID = 'name',
Group = 'group')
htmlwidgets::saveWidget(as_widget(fn), "karateNetwork.html")
library(plotly)
htmlwidgets::saveWidget(as_widget(fn), "karateNetwork.html")
# Installing the required libraries
install.packages("devtools")
install.packages("devtools")
devtools::install_github("Displayr/flipChartBasics")
devtools::install_github("Displayr/flipAPI")
devtools::install_github("bwlewis/rthreejs")
earth = "http://eoimages.gsfc.nasa.gov/images/imagerecords/73000/73909/world.topo.bathy.200412.3x5400x2700.jpg"
globejs(img=earth, bg="black")
#############################################################################
# Rendering a globe with 2000 most populated cities
#############################################################################
data(world.cities, package="maps")
cities = world.cities[order(world.cities$pop,decreasing=TRUE)[1:2000],]
value  = 200 * cities$pop / max(cities$pop)
head(cities)
globejs(bg="black",
lat=cities$lat,
long=cities$long,
value=value,
rotationlat=0.34,
rotationlong=0,
fov=30,
color="#D8D8F6"
)
??globejs
globeCities=globejs(img=earth,bg="black", lat=cities$lat, long=cities$long, value=value, rotationlat=0.34, rotationlong=0, fov=30)
globeCities
htmlwidgets::saveWidget(globeCities, "globeCities.html")
# Loading the libraries
library(threejs)
library(flipChartBasics)
library(flipAPI)
library(maps)
library(maptools)
#setwd("/Users/sanchez.hmsc/Documents/GitHub/dataViz_CADi/scripts/Globe")
##############################################################################
# Basic globe with rastered map
##############################################################################
earth = "http://eoimages.gsfc.nasa.gov/images/imagerecords/73000/73909/world.topo.bathy.200412.3x5400x2700.jpg"
globejs(img=earth, bg="black")
#############################################################################
# Rendering a globe with 2000 most populated cities
#############################################################################
data(world.cities, package="maps")
cities = world.cities[order(world.cities$pop,decreasing=TRUE)[1:2000],]
value  = 200 * cities$pop / max(cities$pop)
head(cities)
globejs(bg="black",
lat=cities$lat,
long=cities$long,
value=value,
rotationlat=0.34,
rotationlong=0,
fov=30,
color="#D8D8F6"
)
globeCities=globejs(img=earth,bg="black", lat=cities$lat, long=cities$long, value=value, rotationlat=0.34, rotationlong=0, fov=30)
globeCities
htmlwidgets::saveWidget(globeCities, "globeCities.html")
# Read the data and calculate age in years
x = read.csv("http://data.nasa.gov/api/views/gh4g-9sfh/rows.csv")
current = as.numeric(format(Sys.Date(), "%Y"))
x$age = current - as.numeric(substr(x$year, 7, 10))
# Filter the required information
x = x[ , c("reclong", "reclat", "mass..g.", "age")]
colnames(x) = c("long","lat","value", "age")
# Plot the data on the globe
globeMeteors=globejs(img=earth,
lat = x$lat,
long = x$long,
val =  x$age * 5 ,
pointsize = 1,
atmosphere = TRUE,
color="#FFFFFF"
)
globeMeteors
htmlwidgets::saveWidget(globeMeteors, "globeMeteors.html")
# Plot the data on the globe
globeMeteors=globejs(img=earth,
lat = x$lat,
long = x$long,
val =  x$age * 3 ,
pointsize = 1,
atmosphere = TRUE,
color="#FFFFFF"
)
globeMeteors
htmlwidgets::saveWidget(globeMeteors, "globeMeteors.html")
# Plot the data on the globe
globeMeteors=globejs(img=earth,
lat = x$lat,
long = x$long,
val =  x$age * 2 ,
pointsize = 1,
atmosphere = TRUE,
color="#FFFFFF"
)
globeMeteors
htmlwidgets::saveWidget(globeMeteors, "globeMeteors.html")
data(flights)
head(flights)
# Approximate locations as factors
dest = factor(sprintf("%.2f:%.2f",flights[,3], flights[,4]))
# A table of destination frequencies
freq = sort(table(dest), decreasing=TRUE)
# The most frequent destinations in these data, possibly hub airports?
frequent_destinations = names(freq)[1:250]
# Subset the flight data by destination frequency
idx = dest %in% frequent_destinations
frequent_flights = flights[idx, ]
# Lat/long and counts of frequent flights
ll = unique(frequent_flights[,3:4])
# Plot frequent destinations as bars, and the flights to and from
# them as arcs. Adjust arc width and color by frequency.
globeFlights=globejs(img=earth,lat=ll[,1], long=ll[,2], arcs=frequent_flights, bodycolor="#aaaaff",
arcsHeight=.45, arcsLwd=.5, arcsColor="#ffffff", arcsOpacity=0.1,
atmosphere=FALSE, value=20, color="#D0D0D0", pointsize=1, bg="black")
globeFlights
htmlwidgets::saveWidget(globeFlights, "globeFlights.html")
data(flights)
head(flights)
# Approximate locations as factors
dest = factor(sprintf("%.2f:%.2f",flights[,3], flights[,4]))
# A table of destination frequencies
freq = sort(table(dest), decreasing=TRUE)
# The most frequent destinations in these data, possibly hub airports?
frequent_destinations = names(freq)[1:150]
# Subset the flight data by destination frequency
idx = dest %in% frequent_destinations
frequent_flights = flights[idx, ]
# Lat/long and counts of frequent flights
ll = unique(frequent_flights[,3:4])
# Plot frequent destinations as bars, and the flights to and from
# them as arcs. Adjust arc width and color by frequency.
globeFlights=globejs(img=earth,lat=ll[,1], long=ll[,2], arcs=frequent_flights, bodycolor="#aaaaff",
arcsHeight=.45, arcsLwd=.5, arcsColor="#ffffff", arcsOpacity=0.1,
atmosphere=FALSE, value=20, color="#D0D0D0", pointsize=1, bg="black")
globeFlights
htmlwidgets::saveWidget(globeFlights, "globeFlights.html")
# Plot the data on the globe
globeMeteors=globejs(img=earth,
lat = x$lat,
long = x$long,
val =  x$age * 2 ,
pointsize = 1,
atmosphere = TRUE,
color="#FFFFFF"
)
globeMeteors
htmlwidgets::saveWidget(globeMeteors, "globeMeteors.html")
globejs(bg="black",
lat=cities$lat,
long=cities$long,
value=value,
rotationlat=0.34,
rotationlong=0,
fov=30,
color="#FFFFFF"
)
??globejs
globeCities=globejs(img=earth,bg="black", lat=cities$lat, long=cities$long, value=value, rotationlat=0.34, rotationlong=0, fov=30)
globeCities
htmlwidgets::saveWidget(globeCities, "globeCities.html")
setwd("~/Documents/GitHub/dataViz_CADi/scripts/Globe")
earth = "http://eoimages.gsfc.nasa.gov/images/imagerecords/73000/73909/world.topo.bathy.200412.3x5400x2700.jpg"
globejs(img=earth, bg="black")
#############################################################################
# Rendering a globe with 2000 most populated cities
#############################################################################
data(world.cities, package="maps")
cities = world.cities[order(world.cities$pop,decreasing=TRUE)[1:2000],]
value  = 200 * cities$pop / max(cities$pop)
head(cities)
globejs(bg="black",
lat=cities$lat,
long=cities$long,
value=value,
rotationlat=0.34,
rotationlong=0,
fov=30,
color="#FFFFFF"
)
??globejs
globeCities=globejs(img=earth,bg="black", lat=cities$lat, long=cities$long, value=value, rotationlat=0.34, rotationlong=0, fov=30)
globeCities
htmlwidgets::saveWidget(globeCities, "globeCities.html")
globeCities=globejs(img=earth,bg="black",color="#FFFFFF",  lat=cities$lat, long=cities$long, value=value, rotationlat=0.34, rotationlong=0, fov=30)
globeCities
htmlwidgets::saveWidget(globeCities, "globeCities.html")
# Read the data and calculate age in years
x = read.csv("http://data.nasa.gov/api/views/gh4g-9sfh/rows.csv")
current = as.numeric(format(Sys.Date(), "%Y"))
x$age = current - as.numeric(substr(x$year, 7, 10))
# Filter the required information
x = x[ , c("reclong", "reclat", "mass..g.", "age")]
colnames(x) = c("long","lat","value", "age")
# Plot the data on the globe
globeMeteors=globejs(img=earth,
lat = x$lat,
long = x$long,
val =  x$age * 1 ,
pointsize = 1,
atmosphere = TRUE,
color="#FFFFFF"
)
globeMeteors
htmlwidgets::saveWidget(globeMeteors, "globeMeteors.html")
data(flights)
head(flights)
# Approximate locations as factors
dest = factor(sprintf("%.2f:%.2f",flights[,3], flights[,4]))
# A table of destination frequencies
freq = sort(table(dest), decreasing=TRUE)
# The most frequent destinations in these data, possibly hub airports?
frequent_destinations = names(freq)[1:150]
# Subset the flight data by destination frequency
idx = dest %in% frequent_destinations
frequent_flights = flights[idx, ]
# Lat/long and counts of frequent flights
ll = unique(frequent_flights[,3:4])
# Plot frequent destinations as bars, and the flights to and from
# them as arcs. Adjust arc width and color by frequency.
globeFlights=globejs(img=earth,lat=ll[,1], long=ll[,2], arcs=frequent_flights, bodycolor="#aaaaff",
arcsHeight=.45, arcsLwd=.5, arcsColor="#ffffff", arcsOpacity=0.1,
atmosphere=FALSE, value=20, color="#D0D0D0", pointsize=1, bg="black")
globeFlights
htmlwidgets::saveWidget(globeFlights, "globeFlights.html")
dest = factor(sprintf("%.2f:%.2f",flights[,3], flights[,4]))
# A table of destination frequencies
freq = sort(table(dest), decreasing=TRUE)
# The most frequent destinations in these data, possibly hub airports?
frequent_destinations = names(freq)[1:100]
# Subset the flight data by destination frequency
idx = dest %in% frequent_destinations
frequent_flights = flights[idx, ]
# Lat/long and counts of frequent flights
ll = unique(frequent_flights[,3:4])
# Plot frequent destinations as bars, and the flights to and from
# them as arcs. Adjust arc width and color by frequency.
globeFlights=globejs(img=earth,lat=ll[,1], long=ll[,2], arcs=frequent_flights, bodycolor="#aaaaff",
arcsHeight=.45, arcsLwd=.5, arcsColor="#ffffff", arcsOpacity=0.1,
atmosphere=FALSE, value=20, color="#D0D0D0", pointsize=1, bg="black")
globeFlights
htmlwidgets::saveWidget(globeFlights, "globeFlights.html")
# Plot frequent destinations as bars, and the flights to and from
# them as arcs. Adjust arc width and color by frequency.
globeFlights=globejs(img=earth,lat=ll[,1], long=ll[,2], arcs=frequent_flights, bodycolor="#aaaaff",
arcsHeight=.45, arcsLwd=.5, arcsColor="#ffffff", arcsOpacity=0.25,
atmosphere=FALSE, value=20, color="#D0D0D0", pointsize=1, bg="black")
globeFlights
dest = factor(sprintf("%.2f:%.2f",flights[,3], flights[,4]))
# A table of destination frequencies
freq = sort(table(dest), decreasing=TRUE)
# The most frequent destinations in these data, possibly hub airports?
frequent_destinations = names(freq)[1:50]
# Subset the flight data by destination frequency
idx = dest %in% frequent_destinations
frequent_flights = flights[idx, ]
# Lat/long and counts of frequent flights
ll = unique(frequent_flights[,3:4])
# Plot frequent destinations as bars, and the flights to and from
# them as arcs. Adjust arc width and color by frequency.
globeFlights=globejs(img=earth,lat=ll[,1], long=ll[,2], arcs=frequent_flights, bodycolor="#aaaaff",
arcsHeight=.45, arcsLwd=.5, arcsColor="#ffffff", arcsOpacity=0.25,
atmosphere=FALSE, value=20, color="#D0D0D0", pointsize=1, bg="black")
globeFlights
# Plot frequent destinations as bars, and the flights to and from
# them as arcs. Adjust arc width and color by frequency.
globeFlights=globejs(img=earth,lat=ll[,1], long=ll[,2], arcs=frequent_flights, bodycolor="#aaaaff",
arcsHeight=.45, arcsLwd=.5, arcsColor="#ffffff", arcsOpacity=0.2,
atmosphere=FALSE, value=20, color="#D0D0D0", pointsize=1, bg="black")
globeFlights
htmlwidgets::saveWidget(globeFlights, "globeFlights.html")
