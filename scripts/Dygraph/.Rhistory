#install.packages("ggplot2")
library(ggplot2)
ToothGrowth
ToothGrowth$dose = as.factor(ToothGrowth$dose)
ToothGrowth
# Creating the first approach to the visualization
p = ggplot(ToothGrowth, aes(x=dose, y=len)) +
geom_violin(trim=FALSE)
p + geom_boxplot(width=0.5)
p + geom_boxplot(width=0.05)
# Testing adding fill color
p = ggplot(ToothGrowth, aes(x=dose, y=len, fill=dose)) +
geom_violin(trim=FALSE)
p + geom_dotplot(binaxis='y', stackdir='center', dotsize=1)
p + geom_dotplot(binaxis='y', stackdir='center', dotsize=.5)
# Changing the color
p = ggplot(ToothGrowth, aes(x=dose, y=len, color=dose)) +
geom_violin(trim=FALSE)
p + geom_dotplot(binaxis='y', stackdir='center', dotsize=1)
# Testing adding fill color
p = ggplot(ToothGrowth, aes(x=dose, y=len, fill=dose)) +
geom_violin(trim=FALSE)
p + geom_dotplot(binaxis='y', stackdir='center', dotsize=.5)
p = ggplot(ToothGrowth, aes(x=dose, y=len, color=dose)) +
geom_violin(trim=FALSE)
data_summary <- function(x) {
m <- mean(x)
ymin <- m-sd(x)
ymax <- m+sd(x)
return(c(y=m,ymin=ymin,ymax=ymax))
}
p + stat_summary(fun.data=data_summary)
p
data_summary <- function(x) {
m <- mean(x)
ymin <- m-sd(x)
ymax <- m+sd(x)
return(c(y=m,ymin=ymin,ymax=ymax))
}
p
p = ggplot(ToothGrowth, aes(x=dose, y=len, color=dose)) +
geom_violin(trim=FALSE)
data_summary <- function(x) {
m <- mean(x)
ymin <- m-sd(x)
ymax <- m+sd(x)
return(c(y=m,ymin=ymin,ymax=ymax))
}
p
p + stat_summary(fun.data=data_summary)
p
getwd()
#
setwd("/Users/sanchez.hmsc/Documents/GitHub/dataViz_CADi/scripts/ViolinPlots/")
getwd()
pdf("violinChart.pdf", width = 4, height = 4)
p
dev.off()
# Testing adding fill color
p = ggplot(ToothGrowth, aes(x=dose, y=len, fill=dose)) +
geom_violin(trim=FALSE)
p + geom_dotplot(binaxis='y', stackdir='center', dotsize=.5)
# Changing the color
p = ggplot(ToothGrowth, aes(x=dose, y=len, color=dose)) +
geom_violin(trim=FALSE)
p + geom_dotplot(binaxis='y', stackdir='center', dotsize=1)
pdf("violinChart.pdf", width = 4, height = 4)
p
dev.off()
p = ggplot(ToothGrowth, aes(x=dose, y=len, color=dose)) +
geom_violin(trim=FALSE)
p=p + geom_dotplot(binaxis='y', stackdir='center', dotsize=1)
p
pdf("violinChart.pdf", width = 4, height = 4)
p
dev.off()
class(ToothGrowth)
ToothGrowth
ToothGrowth$x = ToothGrowth$len
ToothGrowth
ToothGrowth[61]=ToothGrowth[1]
dp <- ggplot(ToothGrowth, aes(x=dose, y=len, fill=dose)) +
geom_violin(trim=FALSE)+
geom_boxplot(width=0.1, fill="white")+
labs(title="Plot of length  by dose",x="Dose (mg)", y = "Length")
dp = dp + scale_fill_brewer(palette="Blues") + theme_classic()
dp
dp = dp + scale_fill_brewer(palette="Blues")
dp <- ggplot(ToothGrowth, aes(x=dose, y=len, fill=dose)) +
geom_violin(trim=FALSE)+
geom_boxplot(width=0.1, fill="white")+
labs(title="Plot of length  by dose",x="Dose (mg)", y = "Length")
dp = dp + scale_fill_brewer(palette="Blues")
dp
dp <- ggplot(ToothGrowth, aes(x=dose, y=len, fill=dose)) +
geom_violin(trim=FALSE)+
geom_boxplot(width=0.1, fill="white")+
labs(title="Plot of length  by dose",x="Dose (mg)", y = "Length")
dp = dp + scale_fill_brewer(palette="Blues") + theme_classic()
dp
dp = dp + scale_fill_brewer(palette="Blues") + theme_dark()
dp
dp = dp + scale_fill_brewer(palette="Blues") + theme_minimal()
dp
width=1
dp=ggplot(diamonds, aes(carat, price)) +
geom_violin(aes(group = cut_width(carat, width), fill=cut_width(carat, width)))
dp + theme(legend.position='none')
dp=ggplot(diamonds, aes(carat, price)) +
geom_violin(aes(group = cut_width(carat, width), fill=cut_width(carat, width)))
dp + theme(legend.position='none')
dp=dp + geom_dotplot(binaxis='y', stackdir='center', dotsize=1)
dp
width=1
dp=ggplot(diamonds, aes(carat, price)) +
geom_violin(aes(group = cut_width(carat, width), fill=cut_width(carat, width)))
dp + theme(legend.position='none')
dp
head(diamonds)
diamonds
p = ggplot(diamonds, aes(carat, price))
p = p + geom_boxplot(aes(group = cut_width(carat, .25)),notchwidth = 0.5)
p
p = ggplot(diamonds, aes(carat, price))
p = p + geom_boxplot(aes(group = cut_width(carat, 1)),notchwidth = 0.5)
p
width=.25
dp=ggplot(diamonds, aes(carat, price)) +
geom_violin(aes(group = cut_width(carat, width), fill=cut_width(carat, width)))
dp + theme(legend.position='none')
dp
p = ggplot(diamonds, aes(carat, price))
p = p + geom_boxplot(aes(group = cut_width(carat, 1)),notchwidth = 0.5)
p
width=.25
dp=ggplot(diamonds, aes(carat, price)) +
geom_violin(aes(group = cut_width(carat, width), fill=cut_width(carat, width)))
dp + theme(legend.position='none')
dp
p = ggplot(diamonds, aes(carat, price))
p = p + geom_boxplot(aes(group = cut_width(carat, 1)),notchwidth = 0.5)
p
deterministicData <- read.csv("~/Documents/GitHub/dataViz_CADi/scripts/TimeSeries/dataset/deterministicData.csv", header=FALSE)
View(deterministicData)
browse(ToothGrowth)
install.packages(devtools)
install.packages("devtools")
devtools::install_github("hrbrmstr/streamgraph")
install.packages("ggplot2movies")
setwd("/Users/sanchez.hmsc/Desktop/")
library(streamgraph)
library(ggplot2movies)
library(dplyr)
setwd("/Users/sanchez.hmsc/Desktop/")
year=rep(seq(1990,2016) , each=10)
name=rep(letters[1:10] , 27)
value=sample( seq(0,1,0.0001) , length(year))
data=data.frame(year, name, value)
data
# Basic stream graph
streamgraph(data, key="name", value="value", date="year")
ggplot2movies::movies
dataMovies=ggplot2movies::movies
dataMovies
ggplot2movies::movies %>%
select(year, Action, Animation, Comedy, Drama, Documentary, Romance, Short) %>%
tidyr::gather(genre, value, -year) %>%
group_by(year, genre) %>%
tally(wt=value) %>%
ungroup %>%
mutate(year=as.Date(sprintf("%d-01-01", year))) -> dat
dat = ggplot2movies::movies %>%
select(year, Action, Animation, Comedy, Drama, Documentary, Romance, Short) %>%
tidyr::gather(genre, value, -year) %>%
group_by(year, genre) %>%
tally(wt=value) %>%
ungroup %>%
mutate(year=as.Date(sprintf("%d-01-01", year)))
dat
streamgraph(dat, "genre", "n", "year")
streamgraph(dat, "genre", "n", "year", interpolate="step")
streamgraph(dat, "genre", "n", "year")
streamgraph(dat, "genre", "n", "year", interpolate="step")
stream=streamgraph(dat, "genre", "n", "year", interpolate="step", scale="date", width=1000, offset="silhouette")  %>% sg_fill_brewer("Blues") %>% sg_axis_x(20, "year", "%Y") %>% sg_axis_y(0)
stream
htmlwidgets::saveWidget(stream, "stream.html")
stream
htmlwidgets::saveWidget(stream, "stream.html")
install.packages("plotly")
library(dygraphs)
library(plotly)
library(htmlwidgets)
setwd("~/Documents/GitHub/dataViz_CADi/scripts/Dygraph")
#setwd("/Users/sanchez.hmsc/Documents/GitHub/dataViz_CADi/scripts/Dygraph")
readData=read.csv2("deterministicData.csv",sep=",",header=FALSE,dec=".")
readData
head(readData)
?ts
##############################################################################
# Lungs example
mdeaths
##############################################################################
# Lungs example
mdeaths
fdeaths
?cbind
lungDeaths <- cbind(mdeaths, fdeaths)
lungDeaths
dygraph(lungDeaths)
dygraph(lungDeaths) %>% dyRangeSelector()
require(stats)
require(graphics)
plot(ldeaths)
plot(mdeaths, fdeaths)
yr <- floor(tt <- time(mdeaths))
plot(mdeaths, fdeaths,
xy.labels = paste(month.abb[12*(tt - yr)], yr-1900, sep = "'"))
mdeaths
fdeaths
lungDeaths <- cbind(mdeaths, fdeaths)
dygraph(lungDeaths)
dygraph(lungDeaths) %>% dyRangeSelector()
#setwd("/Users/sanchez.hmsc/Documents/GitHub/dataViz_CADi/scripts/Dygraph")
readData=read.csv2("deterministicData.csv",sep=",",header=FALSE,dec=".")
head(readData)
# Loading libraries and dataset
library(dygraphs)
library(plotly)
library(htmlwidgets)
#setwd("/Users/sanchez.hmsc/Documents/GitHub/dataViz_CADi/scripts/Dygraph")
readData=read.csv2("deterministicData.csv",sep=",",header=FALSE,dec=".")
head(readData)
tsDataA=ts(readData$V1, frequency = 4, start = c(1959, 1))
tsDataB=ts(readData$V2, frequency = 4, start = c(1959, 1))
tsDataC=ts(readData$V3, frequency = 4, start = c(1959, 1))
tsData=cbind(tsDataA,tsDataB,tsDataC)
tsData
class(tsData)
typeof(tsData)
dygraph(tsData, main = "Genotypes Breakdowns") %>%
dyRangeSelector()
dygraph(tsData, main = "Genotypes Breakdowns") %>%
dySeries("tsDataA", label = "W") %>%
dySeries("tsDataB", label = "H") %>%
dySeries("tsDataC", label = "R") %>%
dyOptions(stackedGraph = FALSE, colors = RColorBrewer::brewer.pal(3, "Set1")) %>%
dyRangeSelector()
dygraph(tsData, main = "Genotypes Breakdowns") %>%
dySeries("tsDataA", label = "W") %>%
dySeries("tsDataB", label = "H") %>%
dySeries("tsDataC", label = "R") %>%
dyOptions(stackedGraph = TRUE, colors = RColorBrewer::brewer.pal(3, "Set1")) %>%
dyRangeSelector()
dygraph(tsData, main = "Genotypes Breakdowns") %>%
dySeries("tsDataA", label = "W") %>%
dySeries("tsDataB", label = "H") %>%
dySeries("tsDataC", label = "R") %>%
dyOptions(stackedGraph = FALSE, colors = RColorBrewer::brewer.pal(3, "Set1")) %>%
dyRangeSelector()
dygraph(tsData, main = "Genotypes Breakdowns") %>%
dySeries("tsDataA", label = "W") %>%
dySeries("tsDataB", label = "H") %>%
dySeries("tsDataC", label = "R") %>%
dyOptions(stackedGraph = TRUE, colors = RColorBrewer::brewer.pal(3, "Set1")) %>%
dyRangeSelector()
dygraph(tsData, main = "Genotypes Breakdowns") %>%
dySeries("tsDataA", label = "W") %>%
dySeries("tsDataB", label = "H") %>%
dySeries("tsDataC", label = "R") %>%
dyOptions(stackedGraph = TRUE, colors = RColorBrewer::brewer.pal(3, "Set1")) %>%
dyRangeSelector()  %>%
dyHighlight(highlightCircleSize = 5,
highlightSeriesBackgroundAlpha = 0.2,
hideOnMouseOut = FALSE)
dygraph(tsData, main = "Genotypes Breakdowns") %>%
dySeries("tsDataA", label = "W") %>%
dySeries("tsDataB", label = "H") %>%
dySeries("tsDataC", label = "R") %>%
dyOptions(stackedGraph = TRUE, colors = RColorBrewer::brewer.pal(3, "Set1")) %>%
dyRangeSelector()  %>%
dyHighlight(highlightCircleSize = 5,
highlightSeriesBackgroundAlpha = 0.8,
hideOnMouseOut = FALSE)
dygraph(tsData, main = "Genotypes Breakdowns") %>%
dySeries("tsDataA", label = "W") %>%
dySeries("tsDataB", label = "H") %>%
dySeries("tsDataC", label = "R") %>%
dyOptions(stackedGraph = TRUE, colors = RColorBrewer::brewer.pal(3, "Set1")) %>%
dyRangeSelector()  %>%
dyHighlight(highlightCircleSize = 5,
highlightSeriesBackgroundAlpha = 0.5,
hideOnMouseOut = FALSE)
dygraph(tsData, main = "Genotypes Breakdowns") %>%
dySeries("tsDataA", label = "W") %>%
dySeries("tsDataB", label = "H") %>%
dySeries("tsDataC", label = "R") %>%
dyOptions(stackedGraph = TRUE, colors = RColorBrewer::brewer.pal(3, "Set1")) %>%
dyRangeSelector()  %>%
dyHighlight(highlightCircleSize = 5,
highlightSeriesBackgroundAlpha = 0.75,
hideOnMouseOut = FALSE)
dyGraph=dygraph(tsData, main = "Genotypes Breakdowns") %>%
dySeries("tsDataA", label = "W") %>%
dySeries("tsDataB", label = "H") %>%
dySeries("tsDataC", label = "R") %>%
dyOptions(stackedGraph = TRUE, colors = RColorBrewer::brewer.pal(3, "Set1")) %>%
dyRangeSelector()
dyGraph
dygraph(tsData, main = "Genotypes Breakdowns") %>%
dySeries("tsDataA", label = "W") %>%
dySeries("tsDataB", label = "H") %>%
dySeries("tsDataC", label = "R") %>%
dyOptions(stackedGraph = TRUE, colors = RColorBrewer::brewer.pal(3, "Set2")) %>%
dyRangeSelector()  %>%
dyHighlight(highlightCircleSize = 5,
highlightSeriesBackgroundAlpha = 0.75,
hideOnMouseOut = FALSE)
dyGraph=dygraph(tsData, main = "Genotypes Breakdowns") %>%
dySeries("tsDataA", label = "W") %>%
dySeries("tsDataB", label = "H") %>%
dySeries("tsDataC", label = "R") %>%
dyOptions(stackedGraph = TRUE, colors = RColorBrewer::brewer.pal(3, "Set1")) %>%
dyRangeSelector()
dyGraph
htmlwidgets::saveWidget(as_widget(dyGraph), "dygraph.html")
dyGraph=dygraph(tsData, main = "Genotypes Breakdowns") %>%
dySeries("tsDataA", label = "W") %>%
dySeries("tsDataB", label = "H") %>%
dySeries("tsDataC", label = "R") %>%
dyOptions(stackedGraph = TRUE, colors = RColorBrewer::brewer.pal(3, "Set3")) %>%
dyRangeSelector()
dyGraph
htmlwidgets::saveWidget(as_widget(dyGraph), "dygraph.html")
dyGraph=dygraph(tsData, main = "Genotypes Breakdowns") %>%
dySeries("tsDataA", label = "W") %>%
dySeries("tsDataB", label = "H") %>%
dySeries("tsDataC", label = "R") %>%
dyOptions(stackedGraph = TRUE, colors = RColorBrewer::brewer.pal(3, "Set1")) %>%
dyRangeSelector()
dyGraph
htmlwidgets::saveWidget(as_widget(dyGraph), "dygraph.html")
install.packages("tidyverse")
